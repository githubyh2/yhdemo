package com.yanhao.jvm23;

/**
 * 线程和进程
 * 类里面有方法的定义与实现
 * 接口里面有方法的声明
 * 注意：
 * 方法上有 native【有声明，无实现】 的需要借助底层第三方库【需要放入native method stack 方法栈中运行】
 * <p>
 * pc寄存器：
 * 记录了方法之间的调用和执行情况，类似排班值日表
 * 它用来存储指向下一条指令的地址，即将要执行的指令代码，它是当前线程所执行的字节码的行号指示器
 * <p>
 * 方法区和堆：所有线程共享，存在垃圾回收
 * 方法区定义：
 * 1、存储了每一个类的结构信息
 * 2、方法区是规范，在不同的虚拟机里面实现是不一样的，最典型的就是 永久代 和 元空间。
 * 栈管运行：堆管存储
 * 程序=算法 + 数据结构（队列[FIFO先进先出]+栈[先进后出]）
 * 程序=框架 + 业务逻辑
 */
public class NativeMethod {
    public static void main(String[] args) {

        System.out.println("本地方法栈。。。。");

        Thread t1 = new Thread();
        t1.start();

    }
}
